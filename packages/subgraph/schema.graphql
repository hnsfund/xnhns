type Domain @entity {
  id: ID!               # The namehash of the name
  name: String          # The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].badass)
  labelName: String     # The human readable label name (imported from CSV), if known
  labelhash: Bytes      # keccak256(labelName)
  parent: Domain        # The namehash (id) of the parent name
  subdomains: [Domain!]! @derivedFrom(field: "parent")  # Can count domains from length of array
  resolvedAddress: Account # Address logged from current resolver, if any
  owner: Account!
  deposit: Deposit
  resolver: Resolver
  ttl: BigInt
  registrar: Bytes
  createdAt: BigInt!
  events: [DomainEvent!]! @derivedFrom(field: "domain")
  registeredAt: BigInt  # Set on register() because verify() creates domains too
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
}

type Deposit implements DomainEvent @entity {
  id: ID!
  domain: Domain! @derivedFrom(field: "deposit")
  blockNumber: Int!
  transactionID: Bytes!
  amount: BigInt!       # amount of tokens deposited
  token: Bytes!         # token address that was deposited
  epochStart: BigInt    # when deposit timelock started
  epochLength: BigInt   # when deposit timelock ends
}

type OracleUpdateReceived implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  oracle: Bytes!
  owner: Account!
}

type Transfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NewOwner implements DomainEvent @entity {
  id: ID!
  parentDomain: Domain!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type MigrationRequested implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  deposit: BigInt!
  token: Bytes!
  registrar: Bytes!
}

type NewResolver implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  resolver: Resolver!
}

type NewTTL implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  ttl: BigInt!
}

type SnitchedOn implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  snitch: Account!
  owner: Account!
  snitchReward: BigInt!
}

type SnitchesGotStitches implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  snitch: Account!
  snitchPenalty: BigInt!
}

type Resolver @entity {
  id: ID!                   # Concatenation of resolver address and namehash
  domain: Domain
  address: Bytes!           # Address of resolver contract

  addr: Account             # Current value of addr record (per events)
  contentHash: Bytes        # Content hash, in binary format.
  texts: [String!]          # Set of observed text record keys
  coinTypes: [Int!]         # Set of observed SLIP-44 coin types
  events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

interface ResolverEvent {
  id: ID!                   # Concatenation of block number and log ID
  resolver: Resolver!       # Used to derive relationships to Resolvers
  blockNumber: Int!
  transactionID: Bytes!
}

type AddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  addr: Account!
}

type MulticoinAddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  coinType: BigInt!
  addr: Bytes!
}

type NameChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  name: String!
}

type AbiChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  contentType: BigInt!
}

type PubkeyChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  x: Bytes!
  y: Bytes!
}

type TextChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  key: String!
}

type ContenthashChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  hash: Bytes!
}

type DNSRecordChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  node: Bytes!
  name: Bytes!
  resource: Int!
  record: Bytes!
}

type DNSRecordDeleted implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  node: Bytes!
  name: Bytes!
  resource: Int!
}

type DNSZoneCleared implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  node: Bytes!
}

type DNSZonehashChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  node: Bytes!
  lastzonehash: Bytes!
  zonehash: Bytes!
}

type InterfaceChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}