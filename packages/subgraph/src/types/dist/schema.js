"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Resolver = exports.SnitchesGotStitches = exports.SnitchedOn = exports.NewTTL = exports.NewResolver = exports.MigrationRequested = exports.NewOwner = exports.Transfer = exports.OracleUpdateReceived = exports.Deposit = exports.Account = exports.Domain = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var Domain = /** @class */ (function (_super) {
    __extends(Domain, _super);
    function Domain(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Domain.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Domain entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Domain entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Domain", id.toString(), this);
    };
    Domain.load = function (id) {
        return graph_ts_1.store.get("Domain", id);
    };
    Object.defineProperty(Domain.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "labelName", {
        get: function () {
            var value = this.get("labelName");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("labelName");
            }
            else {
                this.set("labelName", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "labelhash", {
        get: function () {
            var value = this.get("labelhash");
            if (value === null) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("labelhash");
            }
            else {
                this.set("labelhash", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "parent", {
        get: function () {
            var value = this.get("parent");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("parent");
            }
            else {
                this.set("parent", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "subdomains", {
        get: function () {
            var value = this.get("subdomains");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("subdomains", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "resolvedAddress", {
        get: function () {
            var value = this.get("resolvedAddress");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("resolvedAddress");
            }
            else {
                this.set("resolvedAddress", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toString();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "deposit", {
        get: function () {
            var value = this.get("deposit");
            return value.toString();
        },
        set: function (value) {
            this.set("deposit", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "resolver", {
        get: function () {
            var value = this.get("resolver");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("resolver");
            }
            else {
                this.set("resolver", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "ttl", {
        get: function () {
            var value = this.get("ttl");
            if (value === null) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("ttl");
            }
            else {
                this.set("ttl", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "registrar", {
        get: function () {
            var value = this.get("registrar");
            if (value === null) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("registrar");
            }
            else {
                this.set("registrar", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "createdAt", {
        get: function () {
            var value = this.get("createdAt");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("createdAt", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Domain.prototype, "events", {
        get: function () {
            var value = this.get("events");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("events", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Domain;
}(graph_ts_1.Entity));
exports.Domain = Domain;
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Account.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Account entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Account entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Account", id.toString(), this);
    };
    Account.load = function (id) {
        return graph_ts_1.store.get("Account", id);
    };
    Object.defineProperty(Account.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Account.prototype, "domains", {
        get: function () {
            var value = this.get("domains");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("domains", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Account;
}(graph_ts_1.Entity));
exports.Account = Account;
var Deposit = /** @class */ (function (_super) {
    __extends(Deposit, _super);
    function Deposit(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Deposit.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Deposit entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Deposit entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Deposit", id.toString(), this);
    };
    Deposit.load = function (id) {
        return graph_ts_1.store.get("Deposit", id);
    };
    Object.defineProperty(Deposit.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "amount", {
        get: function () {
            var value = this.get("amount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("amount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "token", {
        get: function () {
            var value = this.get("token");
            return value.toBytes();
        },
        set: function (value) {
            this.set("token", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "epochStart", {
        get: function () {
            var value = this.get("epochStart");
            if (value === null) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("epochStart");
            }
            else {
                this.set("epochStart", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Deposit.prototype, "epochLength", {
        get: function () {
            var value = this.get("epochLength");
            if (value === null) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("epochLength");
            }
            else {
                this.set("epochLength", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return Deposit;
}(graph_ts_1.Entity));
exports.Deposit = Deposit;
var OracleUpdateReceived = /** @class */ (function (_super) {
    __extends(OracleUpdateReceived, _super);
    function OracleUpdateReceived(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    OracleUpdateReceived.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save OracleUpdateReceived entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save OracleUpdateReceived entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("OracleUpdateReceived", id.toString(), this);
    };
    OracleUpdateReceived.load = function (id) {
        return graph_ts_1.store.get("OracleUpdateReceived", id);
    };
    Object.defineProperty(OracleUpdateReceived.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OracleUpdateReceived.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OracleUpdateReceived.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OracleUpdateReceived.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OracleUpdateReceived.prototype, "oracle", {
        get: function () {
            var value = this.get("oracle");
            return value.toBytes();
        },
        set: function (value) {
            this.set("oracle", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OracleUpdateReceived.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toString();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    return OracleUpdateReceived;
}(graph_ts_1.Entity));
exports.OracleUpdateReceived = OracleUpdateReceived;
var Transfer = /** @class */ (function (_super) {
    __extends(Transfer, _super);
    function Transfer(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Transfer.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Transfer entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Transfer entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Transfer", id.toString(), this);
    };
    Transfer.load = function (id) {
        return graph_ts_1.store.get("Transfer", id);
    };
    Object.defineProperty(Transfer.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transfer.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transfer.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transfer.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transfer.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toString();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    return Transfer;
}(graph_ts_1.Entity));
exports.Transfer = Transfer;
var NewOwner = /** @class */ (function (_super) {
    __extends(NewOwner, _super);
    function NewOwner(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    NewOwner.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save NewOwner entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NewOwner entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("NewOwner", id.toString(), this);
    };
    NewOwner.load = function (id) {
        return graph_ts_1.store.get("NewOwner", id);
    };
    Object.defineProperty(NewOwner.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewOwner.prototype, "parentDomain", {
        get: function () {
            var value = this.get("parentDomain");
            return value.toString();
        },
        set: function (value) {
            this.set("parentDomain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewOwner.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewOwner.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewOwner.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewOwner.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toString();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    return NewOwner;
}(graph_ts_1.Entity));
exports.NewOwner = NewOwner;
var MigrationRequested = /** @class */ (function (_super) {
    __extends(MigrationRequested, _super);
    function MigrationRequested(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    MigrationRequested.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save MigrationRequested entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save MigrationRequested entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("MigrationRequested", id.toString(), this);
    };
    MigrationRequested.load = function (id) {
        return graph_ts_1.store.get("MigrationRequested", id);
    };
    Object.defineProperty(MigrationRequested.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "deposit", {
        get: function () {
            var value = this.get("deposit");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("deposit", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "token", {
        get: function () {
            var value = this.get("token");
            return value.toBytes();
        },
        set: function (value) {
            this.set("token", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MigrationRequested.prototype, "registrar", {
        get: function () {
            var value = this.get("registrar");
            return value.toBytes();
        },
        set: function (value) {
            this.set("registrar", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    return MigrationRequested;
}(graph_ts_1.Entity));
exports.MigrationRequested = MigrationRequested;
var NewResolver = /** @class */ (function (_super) {
    __extends(NewResolver, _super);
    function NewResolver(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    NewResolver.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save NewResolver entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NewResolver entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("NewResolver", id.toString(), this);
    };
    NewResolver.load = function (id) {
        return graph_ts_1.store.get("NewResolver", id);
    };
    Object.defineProperty(NewResolver.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewResolver.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewResolver.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewResolver.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewResolver.prototype, "resolver", {
        get: function () {
            var value = this.get("resolver");
            return value.toString();
        },
        set: function (value) {
            this.set("resolver", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    return NewResolver;
}(graph_ts_1.Entity));
exports.NewResolver = NewResolver;
var NewTTL = /** @class */ (function (_super) {
    __extends(NewTTL, _super);
    function NewTTL(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    NewTTL.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save NewTTL entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NewTTL entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("NewTTL", id.toString(), this);
    };
    NewTTL.load = function (id) {
        return graph_ts_1.store.get("NewTTL", id);
    };
    Object.defineProperty(NewTTL.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewTTL.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewTTL.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewTTL.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NewTTL.prototype, "ttl", {
        get: function () {
            var value = this.get("ttl");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("ttl", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return NewTTL;
}(graph_ts_1.Entity));
exports.NewTTL = NewTTL;
var SnitchedOn = /** @class */ (function (_super) {
    __extends(SnitchedOn, _super);
    function SnitchedOn(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    SnitchedOn.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save SnitchedOn entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save SnitchedOn entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("SnitchedOn", id.toString(), this);
    };
    SnitchedOn.load = function (id) {
        return graph_ts_1.store.get("SnitchedOn", id);
    };
    Object.defineProperty(SnitchedOn.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "snitch", {
        get: function () {
            var value = this.get("snitch");
            return value.toString();
        },
        set: function (value) {
            this.set("snitch", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toString();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchedOn.prototype, "snitchReward", {
        get: function () {
            var value = this.get("snitchReward");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("snitchReward", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return SnitchedOn;
}(graph_ts_1.Entity));
exports.SnitchedOn = SnitchedOn;
var SnitchesGotStitches = /** @class */ (function (_super) {
    __extends(SnitchesGotStitches, _super);
    function SnitchesGotStitches(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    SnitchesGotStitches.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save SnitchesGotStitches entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save SnitchesGotStitches entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("SnitchesGotStitches", id.toString(), this);
    };
    SnitchesGotStitches.load = function (id) {
        return graph_ts_1.store.get("SnitchesGotStitches", id);
    };
    Object.defineProperty(SnitchesGotStitches.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchesGotStitches.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            return value.toString();
        },
        set: function (value) {
            this.set("domain", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchesGotStitches.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toI32();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromI32(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchesGotStitches.prototype, "transactionID", {
        get: function () {
            var value = this.get("transactionID");
            return value.toBytes();
        },
        set: function (value) {
            this.set("transactionID", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchesGotStitches.prototype, "snitch", {
        get: function () {
            var value = this.get("snitch");
            return value.toString();
        },
        set: function (value) {
            this.set("snitch", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SnitchesGotStitches.prototype, "snitchPenalty", {
        get: function () {
            var value = this.get("snitchPenalty");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("snitchPenalty", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return SnitchesGotStitches;
}(graph_ts_1.Entity));
exports.SnitchesGotStitches = SnitchesGotStitches;
var Resolver = /** @class */ (function (_super) {
    __extends(Resolver, _super);
    function Resolver(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Resolver.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save Resolver entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Resolver entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("Resolver", id.toString(), this);
    };
    Resolver.load = function (id) {
        return graph_ts_1.store.get("Resolver", id);
    };
    Object.defineProperty(Resolver.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "domain", {
        get: function () {
            var value = this.get("domain");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("domain");
            }
            else {
                this.set("domain", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "address", {
        get: function () {
            var value = this.get("address");
            return value.toBytes();
        },
        set: function (value) {
            this.set("address", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "addr", {
        get: function () {
            var value = this.get("addr");
            if (value === null) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("addr");
            }
            else {
                this.set("addr", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "contentHash", {
        get: function () {
            var value = this.get("contentHash");
            if (value === null) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("contentHash");
            }
            else {
                this.set("contentHash", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "texts", {
        get: function () {
            var value = this.get("texts");
            if (value === null) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("texts");
            }
            else {
                this.set("texts", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "coinTypes", {
        get: function () {
            var value = this.get("coinTypes");
            if (value === null) {
                return null;
            }
            else {
                return value.toI32Array();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("coinTypes");
            }
            else {
                this.set("coinTypes", graph_ts_1.Value.fromI32Array(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resolver.prototype, "events", {
        get: function () {
            var value = this.get("events");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("events", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Resolver;
}(graph_ts_1.Entity));
exports.Resolver = Resolver;
